{
    "CounterHook.sol": "A simple hook that has 4 counters per PoolId - beforeSwap, afterSwap, beforeAddLiquidity, afterAddLiquidity",
    "PointsHook.sol": "Imagine you have some memecoin-type coin called TOKEN. We want to attach our hook into ETH <> TOKEN pools. Our goal is to incentivize swappers to buy TOKEN in exchange for ETH, and for LPs to add liquidity to our pool. Also, we want to allow people to refer other users such that the referrer will earn some commission every time the referree buys TOKEN for ETH or adds liquidity to the pool. This incentivization happens through the hook issuing a second POINTS token when desired actions occur. For simplicity, we'll set some basic rules and assumptions: When a user gets referred, we will mint a hardcoded amount of POINTS token to the referrer - in our case, 500 POINTS. When a swap takes place which buys TOKEN for ETH - we will issue POINTS equivalent to how much ETH was swapped in to the user, and 10% of that amount to the referrer (if any). When someone adds liquidity, we will issue POINTS equivalent to how much ETH they added, and 10% of that amount to the referrer (if any).",
    "KYCHook.sol": "Allows for Know Your Customer (KYC) checks to be performed on users before they are allowed to trade on a pool. This can be used to prevent fraud and ensure that only legitimate users are able to trade.",
    "GasPriceFeesHook.sol": "A hook that keeps track of the moving average gas price over time onchain. When gas price is roughly equal to the average, we will charge a certain amount of fees. If gas price is over 10% higher than the average, we will charge lower fees. If gas price is at least 10% lower than the average, we will charge higher fees.",
    "MultiSigSwapHook.sol": "Requires multiple signatures for certain pool actions, such as adding or removing liquidity. This can be used to add an extra layer of security to a pool.",
    "ERC721OwnershipHook.sol": "Disallows a swap if sender doesn't own an ERC721 NFT. This can be used to prevent people from selling tokens that they don't own.",
    "LimitOrder.sol":"A hook that allows users to place limit orders. This means that they can specify the price at which they are willing to buy or sell an asset. If the market price reaches the limit price, the order will be executed.",
    "GeomeanOracle.sol":"A unique hook making a Uniswap pool function as an oracle. The geomean price is calculated using the prices of the assets in the pool. This can be used to get a more accurate price for an asset than a single oracle.",
    "WhiteListHook.sol":"The Whitelist Hook contract is an advanced implementation designed to work seamlessly with Uniswap v4's innovative hook system. This contract enables restriction of access to pools based on a whitelist, ensuring that only authorized addresses can interact with the pools."
}
